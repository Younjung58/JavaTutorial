    Cat_Obj [ ] clist = new Cat_Obj[5];
=> 타입
    원시타입
    참조타입 
     -> 배열은 참조타입	-> 따라서 변수clist도 참조변수

-> 선언문으로 clist라는 변수에 값을 저장할건데, 자료형은 참조타입인 배열이다.
    배열의 값으로는 Cat_Obj객체의 주소를 저장할건데, 
    new연산자를 이용하여 길이가 5인 배열의 객체를 생성하여 객체의 주소를 clist의 변수에 저장한다. 

** 해석할때 끊어서 하기 **
Cat_Obj[ ]
clist 
= 
new 
Cat_Obj[5];


선언문: 변수를 만들겠다는 것. '자료형 변수명'의 형태
          선언문에서 자료형은 '저장할 값의 타입을 지정하는 것'

타입은 참조타입(객체의주소를 저장)과 원시타입(실제값을 저장)으로 나뉨
해당 선언문에서 자료형은 배열이며, 이는 참조타입에 해당한다.
1. 선언문이다.(자료형과 변수 존재)
2. 참조타입인 배열을 clist라는 변수명으로 선언할건데, 여기에 저장될 수 있는 값은 Cat_Obj로 만들어진 객체에 대한 주소이다.
3. 대입연산자 =로 뒤의 값을 clist에 대입하여 저장할 것이다.
4. new로 객체를 생성한다.
5. 생성자인 Cat_Obj로, 길이가 5인 배열의 객체를 생성하여 clist에 객체의 주소를 저장한다.


<위 코드의 해석에 대한 개념 최종정리>
Cat_Obj[] clist      =   new Cat_Obj[5];
타입       변수                 생성자
원시타입  원시변수
참조타입  참조변수

clist 참조변수는 배열 객체의 주소를 저장한다.
배열은 값으로 Cat_Obj객체의 주소값을 저장하며, 
배열의 길이는 5이다.
"위 선언문에서 변수는 배열의 주소의 값을 저장한다.
배열의 값은 Cat_Obj 객체의 주소값을 저장한다."

객체와 객체의 주소값의 의미는 다르다.
객체는 실제 사용하려는 대상이고 존재가 있어야 한다.
객체의 주소값은 실제 사용하려는 존재가 없어도
그 자체로 의미를 가진다.

-----------------------------------------------------------------------------
또다른 코드의 해석!

int[]                                 clist      =   new Cat_Obj[5];
타입                                   변수                 생성자
원시타입자료형을 저장할 배열  				  참조변수
                                      배열은 참조타입이기때문
                                      
clist 참조변수는 배열 객체의 주소를 저장한다.
배열은 값으로 원시타입의 정수를 저장한다. 
배열의 길이는 5이다.
위 선언문에서 변수는 배열의 주소의 값을 저장한다.
배열의 값은 원시타입의 정수를 저장한다.

-----------------------------------------------------------------------------

메모리에 상주하고 있어야 실행중인것이라고 말할 수 있다.
즉, 클래스가 존재하는 것이 실행중이라고 말할 수 없다는 것이다.

클래스 -> 클래스 ->.... 처럼
시작을 호출하는 모든 단계를 기록하는 곳 -> '스택'
***
스택(stack)(FILO/LIFO)(입출력 한곳) <-> 큐(queue)(FIFO/LILO)(입출력 서로 다른방향)

즉, 호출하고있는 메소드를 저장하는 것 -> '스택'
따라서, 클래스는 -> 소스이자 코드일뿐 실행중이라고 표현할 수 없다는 것이다.
ctrl+f11을 누르면 스레드가 생성되고(main method를 가장먼저 호출)
자바 코드를 실행시키는 것이다.
이처럼 자바에서 실행중인 코드를 '스레드(Thread)'라고 한다.


JVM(Java Virtual Machine) : 메소드 호출할때마다 스택에 쌓이고, 선입후출의 구조이므로 최신에 호출된 메소드부터 종료되고, 마지막에 main 메소드가 종료됨.
      메소드가 호출될때 지역변수가 함께 선언되고, 종료되면 소멸한다.
      
객체의 생성은 개발자가 관리하고, 참조되지 않을때 소멸된다.

!~TIP~!
참조를 적게하는게 좋다.
멤버변수 vs 지역변수를 적절하게 사용하자.

-----------------------------------------------------------------------------
Class에 정의된 변수에 참조하려면 먼저 객체를 생성해야한다. -> O

Class: 개발자가 만든(정의한) 자료형, 개발자가 표현하려고(만들고싶어/정의하려고) 하는 대상