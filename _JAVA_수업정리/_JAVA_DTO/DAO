1. DTO / 2. DAO --> 클래스 설계
3. 싱글톤 --> 디자인
    static
    final

<운영체제 구성>
운영체제: 컴퓨터를 구성하는 하드웨어(자원)를 관리하는 역할
	사용자가 하드웨어를 사용할 수 있게 해주는 중재역할
     -> 운영체제 종류: 윈도우, 리눅스... 이것들에 따라서 하드웨어를 어떻게 사용할지가 달라짐

1. CPU
2. RAM(random access memory)(ex. jvm, oracle..) 
-> jvm에서 객체, 배열,DTO,DAO 생성시 저장하고 있음...
ex. Scanner라는 객체를 만들었을때는 jvm이 독자적으로 해결을 하지 못함
     입력받아야하기 때문에 운영체제가 담당하고 있는 키보드 자원의 도움을 받아야함
     키보드는 공용으로 사용하고 있는 것이기에 이런것은 모두 예외처리를 해주는 것이 좋음
     또한 사용완료시에는 반납을 해주는 것이 좋음
     => 즉, 다른 시스템의 자원을 빌렸을 때 예외처리를 해주는 것이 좋음
    
     I/O 객체는 HDD 자원과 연결됨

     ojdbc6 라이브러리를 이용하여 자원을 사용한것(컨넥션)또한 oracle의 자원이기에 예외처리+자원반납(close)
     컨넥션은 오라클에서 빌려주는 공용자원이기때문
   -> '컨넥션 pool'(DBCP)(자원을 관리하고 있는것, 컨넥션을 적당 갯수만을 미리 만들어서 관리,
	         오라클을 공통으로 누구나 사용할 수 있게 해줌+자원을 무한대로 만들지 않겠다->성능저하)

3. HDD / 4. Keyboard / 5. Lan
      
-------------------------------------------------------------------------------------------------------------------------
<클래스 - DTO / DAO>
1. Main

2. FishDTO  
private String id
private String pwd
 -> 왜 private??? 데이터의 '은닉화'를 위해서 private를 사용, 데이터의 접근제어 역할

3. Fish Service(고객에게 서비스)	- 서비스를 어떻게 처리해줄지에 대한 역할만
등록 -> insert기능필요
 => 등록에 필요한 여러가지 변수 (id, pwd)를 한번에 DTO객체를 통하여 입력, DAO전송하면 됨
	FishDTO a = new FishDTO();
	           a.id = 입력받은 id
	           a.pwd = 입력받은 pwd;
                       insert(a);
삭제 -> delete기능필요
수정 -> update기능필요
전체보기 -> select기능필요
자세히보기 -> select / update기능필요

4. FishDAO(Database Access Object)-데이터베이스 접근하는 권한을 따로 만듦(CRUD만하는 역할)(한 class에 한 역할만 부여)
insert(FishDTO a)
delete()
selectAll()
selectOne()
updateFish()
updatecnt()
--> 데이터베이스 변경이 생기면, 서비스 화면은 변화하지않고, DAO클래스만 수정하면 됨
--> DAO 클래스: 싱글톤으로 형성(클래스 본인만 자신의 클래스 객체를 만들 수 있는것)

----> DTO객체는 무조건 여러개 필요(=> 튜플하나당 무조건 하나)
	/ FishService, FishDAO는 굳이 여러개 필요하지 않음(힙영역이 불필요하게 낭비될 수 있음)

<DB>
-fish table-
id   /  pwd

-------------------------------------------------------------------------------------------------------------------------
preparedStatement -> ?부분에 대한 mapping이 필요
Statement -> mapping필요 없음