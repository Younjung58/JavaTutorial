package _08_심화_Array2;

public class _test_04 {

	public static void main(String[] args) {
		int[][] a = new int[4][5];
		int num = 1;
		
		/* 출력되어야하는 답의 형태
		 * 1 2 4 7 11
		 * 3 5 8 12 15
		 * 6 9 13 16 18
		 * 10 14 17 19 20
		 */
		
		//사고과정.
		// 숫자가 1부터 20까지 증가하는 형태로 필요 - 이에 맞게 일차적으로 배열값 입력
		// 배열의 길이는 행4, 열5로 정해져있으므로 문제에 맞게 출력하기 위해서는 
		// 처음 값을 입력하는 순서가 중요함
		// 따라서 입력 순서를 생각해보면,
		// (0,0)->				합 0
		// (0,1)->(1,0)->		합 1
		// (0,2)->(1,1)->(2,0)->	합 2
		// (0,3)->(1,2)->(3,0)		합 3
		// (0,4)->...->(3,1)	합 4
		// (1,4) ->(2,3) -> (3,2) ...
		// (2,4)-> ...
		// (3,4)				합 7
		// .... 이런식
		// 즉 행과 열의 값의 합이 0, 1, 2 ...로 늘어나되(반복의 증가),
		// 그 합은 행과 열의 총 합의 -1한 값까지 증가한다.(반복의 횟수 -> 정수로 선언)
		// 행은 0,1,2 ..의 순이고, 열은 그의 역순으로 0이 될때까지 진행된다.			-구분점 1
		// 다만, 열의 최대값인 4에 도달했을때부터는							-구분점 2
		// 열의 시작이 열의 최대값으로 고정되어지고
		// 그에따라 행의 값이 행의 최대값까지로 진행되도록 바뀐다.(각구분점은 if문으로 구분 필요)
		// 행(k)와 열(j)의 합은 해당순서의 합(i)로 일정
		// 열은 i-k   =>  즉 a[k][i-k]인것  또는 a[i-j][j]
		// a.length = 4  / a[0].length = 5
		// 배열값 입력
		
		int leng = (a.length+a[0].length-1);
		
		for (int i = 0; i < leng; i++) {
			if(i<a[0].length-1) {			// 열의 최대값에 도달 전(구분점 1)
				for (int j = i; j >= 0; j--) {
					a[i-j][j]=num;
					num++;
				}
			}else {		// 열 최대값 도달 이후는 행의 최대값까지 진행(구분점 2)
				for (int j = a[0].length-1; i-j < a.length; j--) {	
					a[i-j][j]=num;
					num++;
				}
			}
		}
		
		
		for (int i = 0; i < a.length; i++) {
			for (int j = 0; j < a[0].length; j++) {
				System.out.print(a[i][j]+"\t");
			}
			System.out.println();
		}

	}

}
