package _08_심화_Array2;

public class _test_04_다른풀이 {

	public static void main(String[] args) {
		int[][] a = new int[4][5];
		int num = 1;
		
		/* 출력되어야하는 답의 형태
		 * 1 2 4 7 11
		 * 3 5 8 12 15
		 * 6 9 13 16 18
		 * 10 14 17 19 20
		 */
		
		//다른관점으로 풀어보기.
		//사고과정.
		// for문 최소화해서
		/*		0	1	2	3	4	|	5	6	7     <- 열(있는 값으로 나타내면 기존 배열의 '행+열-1'까지이다.)
		 * 0						|	여기는
		 * 1						|	있다고
		 * 2						|	가정하는 공간  
		 * 3						|	 -> 한번의 반복으로 모든 부분을 채우기 위해서
		 * ↑
		 * 행
		 */
		// 즉, 넣고 싶은 구상은
		// 0번째	-> 	0,0
		// 1번째	->	0,1	/ 1,0
		// 2번째	->	0,2 / 1,1 / 2,0
		// 3번째	->	0,3 / 1,2 / 2,1 / 3,0
		// 4번째	->	0,4 / 1,3 / 2,2 / 3,1 / 4,0*
		// 5번째	->	0,5* / 1,4 / 2,3 / 3,2 / 4,1* / 5,0*
		// 6번째	->	0,6* / 1,5* / 2,4 / 3,3 / 4,2* / 5,1* / 6,0*
		// 7번째	->	0,7* / 1,6* / 2,5* / 3,4 / 4,3* / 5,2* / 6,1* / 7,0*
		// 의 형태이다. (열이 바깥반복 / 안쪽 행과열의 값이 안쪽반복)
		// 여기서, n번째의 n이 각 행과열의 총합과 일치하는 것을 확인할 수 있다. -> 총 횟수를 바깥 for의 i로 설정
		// 안쪽에 반복되는 값에서 행이 0부터 횟수의 n값까지 진행되는 것을 확인할 수 있다. -> 안쪽 for문 j, 조건은 j<=i
		// 단, 실제로 값이 입력되지 않는 부분은 제외시켜줘야한다.(*로 표시한 값은 입력되지 않을 것이다.) 
		// 따라서 이러한 부분은 if문으로 구분이 필요하다. 불필요한 부분은 각 배열의 행과 열의 범위를 넘어갔을경우이다.
		// 먼저 행을 넘어갔을 경우 -> 1차적으로 구분
		// 열을 넘어갔을 경우 -> 2차적으로 구분
		// 위 사고와 같이 바깥 i(반복횟수) = '행+열-1' 즉, a.length+a[0].length-1로 나타내고
		// 한번 반복시마다 총 합(i)이 고정되어있으므로, (이때 i의 값으로 시작되는 것이 행과 열중 '열'임을 확인)
		// 새로운 행인 j에 대해서(안쪽에 값을 입력할 for문의 변수, j는 행을 의미)
		// j는 바깥의 i까지 진행되지만, 1차적 구분을 통하여 멈추게 할 것.
		// 열을 또하나의 변수(newCol)를 이용하여 i의 값을 저장하고 한 행에 대해서 열을 감소시켜가며 값을 넣을 것이다.
		// 이러한 열 값도 2차적 구분을 통하여 값이 들어가는 것을 제어할 것이다.
		// a.length-1 = 3  / a[0].length-1 = 4
		
		// 배열값 입력
		for (int i = 0; i < (a.length+a[0].length-1); i++) {
//			System.out.println(i+"번째 채우기를 합니다.");	// 디버깅용
			int newCol = i;
			for (int j = 0; j <= i; j++) {		
			// 이때 j를 행으로 사용할 것임(j자체를 행의 구분으로 사용하여 행이 넘어가면 for문을 멈추게 할 것)
				if(j > a.length-1)	// 1차적 구분(행을 넘어갔을 때 멈추게)
					break;
				if(newCol <= a[0].length-1) {	// 2차적 구분(열을 넘어가기 전까지만 진행)
					a[j][newCol]=num++;
//					System.out.println(j+"행"+newCol+"열");  // 디버깅용
				}	
			newCol--; // 열 값을 역순으로 넣을 것이기 때문에 한 패턴을 돌때마다 열의 값을 1씩 감소
			}
			System.out.println();
		}
		
		
		// 배열 값 출력
		for (int i = 0; i < a.length; i++) {
			for (int j = 0; j < a[0].length; j++) {
				System.out.print(a[i][j]+"\t");
			}
			System.out.println();
		}

	}

}
